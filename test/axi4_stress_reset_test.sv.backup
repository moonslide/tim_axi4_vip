`ifndef AXI4_STRESS_RESET_TEST_INCLUDED_
`define AXI4_STRESS_RESET_TEST_INCLUDED_

//--------------------------------------------------------------------------------------------
// Class: axi4_stress_reset_test
// Stress test with mid-burst reset injection
// Implements axi4_saturation_midburst_reset_qos_boundary_test from test plan
// Supports 3 bus matrix modes: NONE, BASE_BUS_MATRIX (4x4), BUS_ENHANCED_MATRIX (10x10)
//--------------------------------------------------------------------------------------------
class axi4_stress_reset_test extends axi4_base_test;
  `uvm_component_utils(axi4_stress_reset_test)

  // Virtual sequence handle
  axi4_stress_reset_virtual_seq stress_reset_vseq;
  
  // Configuration parameters
  int num_masters;
  int num_slaves;
  bit is_enhanced_mode;
  bit is_4x4_ref_mode;
  string bus_matrix_mode_str;

  //-------------------------------------------------------
  // Externally defined Tasks and Functions
  //-------------------------------------------------------
  extern function new(string name = "axi4_stress_reset_test", uvm_component parent = null);
  extern virtual function void build_phase(uvm_phase phase);
  extern virtual function void configure_bus_matrix_mode();
  extern virtual task run_phase(uvm_phase phase);
  extern virtual task apply_reset_pulse();
  
endclass : axi4_stress_reset_test

//--------------------------------------------------------------------------------------------
// Construct: new
// Initializes class object
//
// Parameters:
//  name - axi4_stress_reset_test
//  parent - parent under which this component is created
//--------------------------------------------------------------------------------------------
function axi4_stress_reset_test::new(string name = "axi4_stress_reset_test", uvm_component parent = null);
  super.new(name, parent);
endfunction : new

//--------------------------------------------------------------------------------------------
// Function: build_phase
// Create required configuration
//
// Parameters:
//  phase - uvm phase
//--------------------------------------------------------------------------------------------
function void axi4_stress_reset_test::build_phase(uvm_phase phase);
  int override_masters, override_slaves;
  axi4_bus_matrix_ref::bus_matrix_mode_e override_mode;
  
  // Configure bus matrix mode BEFORE calling super.build_phase()
  configure_bus_matrix_mode();
  
  super.build_phase(phase);
  
  // Apply our bus matrix mode overrides after super.build_phase()
  if (uvm_config_db#(axi4_bus_matrix_ref::bus_matrix_mode_e)::get(this, "*", "bus_matrix_mode", override_mode)) begin
    axi4_env_cfg_h.bus_matrix_mode = override_mode;
  end
  
  if (uvm_config_db#(int)::get(this, "*", "override_num_masters", override_masters)) begin
    axi4_env_cfg_h.no_of_masters = override_masters;
  end
  
  if (uvm_config_db#(int)::get(this, "*", "override_num_slaves", override_slaves)) begin
    axi4_env_cfg_h.no_of_slaves = override_slaves;
  end
  
  // Set number of masters and slaves based on configuration
  num_masters = axi4_env_cfg_h.no_of_masters;
  num_slaves = axi4_env_cfg_h.no_of_slaves;
  
  `uvm_info(get_type_name(), "=========================================", UVM_LOW)
  `uvm_info(get_type_name(), "AXI4 STRESS RESET TEST", UVM_LOW)
  `uvm_info(get_type_name(), "=========================================", UVM_LOW)
  `uvm_info(get_type_name(), $sformatf("Bus Matrix Mode: %s", bus_matrix_mode_str), UVM_LOW)
  `uvm_info(get_type_name(), $sformatf("Masters: %0d, Slaves: %0d", num_masters, num_slaves), UVM_LOW)
  `uvm_info(get_type_name(), "=========================================", UVM_LOW)
  
  // Enable error injection support in environment
  uvm_config_db#(bit)::set(this, "*", "error_inject", 0);
  
  // Configure slave response mode for memory testing
  foreach(axi4_env_cfg_h.axi4_slave_agent_cfg_h[i]) begin
    axi4_env_cfg_h.axi4_slave_agent_cfg_h[i].slave_response_mode = RESP_IN_ORDER;
    axi4_env_cfg_h.axi4_slave_agent_cfg_h[i].read_data_mode = SLAVE_MEM_MODE;
  end
  
endfunction : build_phase

//--------------------------------------------------------------------------------------------
// Function: configure_bus_matrix_mode
// Configure the bus matrix mode based on plusargs or random selection
//--------------------------------------------------------------------------------------------
function void axi4_stress_reset_test::configure_bus_matrix_mode();
  string mode_str;
  bit mode_configured = 0;
  int random_mode;
  axi4_bus_matrix_ref::bus_matrix_mode_e selected_mode;
  int selected_masters, selected_slaves;
  
  // Check for command-line plusarg
  if ($value$plusargs("BUS_MATRIX_MODE=%s", mode_str)) begin
    `uvm_info(get_type_name(), $sformatf("Bus matrix mode from plusarg: %s", mode_str), UVM_MEDIUM)
    if (mode_str == "ENHANCED" || mode_str == "enhanced" || mode_str == "10x10") begin
      selected_mode = axi4_bus_matrix_ref::BUS_ENHANCED_MATRIX;
      selected_masters = 10;
      selected_slaves = 10;
      is_enhanced_mode = 1;
      is_4x4_ref_mode = 0;
      bus_matrix_mode_str = "ENHANCED (10x10 with ref model)";
      mode_configured = 1;
    end else if (mode_str == "4x4" || mode_str == "4X4" || mode_str == "BASE" || mode_str == "base") begin
      selected_mode = axi4_bus_matrix_ref::BASE_BUS_MATRIX;
      selected_masters = 4;
      selected_slaves = 4;
      is_enhanced_mode = 0;
      is_4x4_ref_mode = 1;
      bus_matrix_mode_str = "BASE_BUS_MATRIX (4x4 with ref model)";
      mode_configured = 1;
    end else if (mode_str == "NONE" || mode_str == "none") begin
      selected_mode = axi4_bus_matrix_ref::NONE;
      selected_masters = 4;
      selected_slaves = 4;
      is_enhanced_mode = 0;
      is_4x4_ref_mode = 0;
      bus_matrix_mode_str = "NONE (no ref model, 4x4 topology)";
      mode_configured = 1;
    end
  end
  
  // Random selection if no configuration provided
  if (!mode_configured) begin
    random_mode = $urandom_range(0, 2);
    if (random_mode == 2) begin
      selected_mode = axi4_bus_matrix_ref::BUS_ENHANCED_MATRIX;
      selected_masters = 10;
      selected_slaves = 10;
      is_enhanced_mode = 1;
      is_4x4_ref_mode = 0;
      bus_matrix_mode_str = "ENHANCED (10x10) [RANDOM]";
    end else if (random_mode == 1) begin
      selected_mode = axi4_bus_matrix_ref::BASE_BUS_MATRIX;
      selected_masters = 4;
      selected_slaves = 4;
      is_enhanced_mode = 0;
      is_4x4_ref_mode = 1;
      bus_matrix_mode_str = "BASE_BUS_MATRIX (4x4) [RANDOM]";
    end else begin
      selected_mode = axi4_bus_matrix_ref::NONE;
      selected_masters = 4;
      selected_slaves = 4;
      is_enhanced_mode = 0;
      is_4x4_ref_mode = 0;
      bus_matrix_mode_str = "NONE (4x4 topology) [RANDOM]";
    end
  end
  
  // Create test_config if it doesn't exist
  if (test_config == null) begin
    test_config = axi4_test_config::type_id::create("test_config");
  end
  
  // Set configuration
  test_config.bus_matrix_mode = selected_mode;
  test_config.num_masters = selected_masters;
  test_config.num_slaves = selected_slaves;
  
  // Store in config_db
  uvm_config_db#(axi4_test_config)::set(null, "*", "test_config", test_config);
  uvm_config_db#(axi4_bus_matrix_ref::bus_matrix_mode_e)::set(this, "*", "bus_matrix_mode", selected_mode);
  uvm_config_db#(int)::set(this, "*", "override_num_masters", selected_masters);
  uvm_config_db#(int)::set(this, "*", "override_num_slaves", selected_slaves);
  
endfunction : configure_bus_matrix_mode

//--------------------------------------------------------------------------------------------
// Task: run_phase
// Run the stress reset virtual sequence
//
// Parameters:
//  phase - uvm phase
//--------------------------------------------------------------------------------------------
task axi4_stress_reset_test::run_phase(uvm_phase phase);
  bit inject_reset;
  
  `uvm_info(get_type_name(), "Starting AXI4 Stress Reset Test", UVM_LOW)
  
  phase.raise_objection(this, "axi4_stress_reset_test");
  
  // Monitor for reset injection request
  fork
    forever begin
      uvm_config_db#(bit)::wait_modified(this, "*", "inject_reset");
      if(uvm_config_db#(bit)::get(null, "*", "inject_reset", inject_reset)) begin
        if(inject_reset) begin
          apply_reset_pulse();
        end
      end
    end
  join_none
  
  // Create and start the virtual sequence
  stress_reset_vseq = axi4_stress_reset_virtual_seq::type_id::create("stress_reset_vseq");
  
  // Configure test parameters based on bus matrix mode (optimized for fast execution)
  if (is_enhanced_mode) begin
    stress_reset_vseq.num_transactions = 1; // Minimal to avoid timeout
    stress_reset_vseq.reset_delay_cycles = 10; // Further reduced for performance
    stress_reset_vseq.use_bus_matrix_addressing = 2; // ENHANCED mode
  end else if (is_4x4_ref_mode) begin
    stress_reset_vseq.num_transactions = 1; // Minimal to avoid timeout
    stress_reset_vseq.reset_delay_cycles = 10; // Further reduced for performance
    stress_reset_vseq.use_bus_matrix_addressing = 1; // BASE mode
  end else begin
    stress_reset_vseq.num_transactions = 1; // Minimal for NONE
    stress_reset_vseq.reset_delay_cycles = 10; // Further reduced for performance
    stress_reset_vseq.use_bus_matrix_addressing = 0; // NONE mode
  end
  
  // Start the sequence on virtual sequencer
  stress_reset_vseq.start(axi4_env_h.axi4_virtual_seqr_h);
  
  // Additional time for observation (optimized)
  #100ns;
  
  `uvm_info(get_type_name(), "Completed AXI4 Stress Reset Test", UVM_LOW)
  
  // Check for protocol violations
  if(axi4_env_h.axi4_scoreboard_h != null) begin
    if(axi4_env_h.axi4_scoreboard_h.unexpected_error_count > 0) begin
      `uvm_error(get_type_name(), $sformatf("Test failed with %0d unexpected errors", axi4_env_h.axi4_scoreboard_h.unexpected_error_count))
    end else begin
      `uvm_info(get_type_name(), "Test passed with no unexpected errors", UVM_LOW)
    end
  end
  
  phase.drop_objection(this);
  
endtask : run_phase

//--------------------------------------------------------------------------------------------
// Task: apply_reset_pulse
// Apply reset pulse to DUT
//--------------------------------------------------------------------------------------------
task axi4_stress_reset_test::apply_reset_pulse();
  
  `uvm_info(get_type_name(), "Applying reset pulse to DUT", UVM_LOW)
  
  // Assert reset through virtual interface
  // This assumes the testbench has a reset control interface
  // The actual implementation depends on the testbench architecture
  
  // Example reset sequence (adjust based on actual testbench):
  // vif.rst_n = 0;
  // #1000ns;
  // vif.rst_n = 1;
  
  `uvm_info(get_type_name(), "Reset pulse completed", UVM_LOW)
  
endtask : apply_reset_pulse

`endif